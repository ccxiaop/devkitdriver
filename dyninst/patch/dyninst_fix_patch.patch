/*
   Copyright (C) 2020. Huawei Technologies Co., Ltd. All rights reserved.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU LESSER General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
diff --git a/common/h/entryIDs.h b/common/h/entryIDs.h
index eba30b2..b2e22f4 100644
--- a/common/h/entryIDs.h
+++ b/common/h/entryIDs.h
@@ -1048,6 +1048,8 @@ enum entryID {
   e_vshufps,
   e_vshuff32x4,
   e_vshuff64x2,
+  e_vshufi32x4,
+  e_vshufi64x2,
   e_vsqrtpd,
   e_vsqrtps,
   e_vsqrtsd,
diff --git a/common/src/arch-x86.C b/common/src/arch-x86.C
index 42e8cee..7ea236a 100644
--- a/common/src/arch-x86.C
+++ b/common/src/arch-x86.C
@@ -639,12 +639,12 @@ VEXW00 = 0, VEXW01, VEXW02, VEXW03, VEXW04, VEXW05, VEXW06, VEXW07,
   VEXW78, VEXW79, VEXW7A, VEXW7B, VEXW7C, VEXW7D, VEXW7E, VEXW7F,
   VEXW80, VEXW81, VEXW82, VEXW83, VEXW84, VEXW85, VEXW86, VEXW87,
   VEXW88, VEXW89, VEXW8A, VEXW8B, VEXW8C, VEXW8D, VEXW8E, VEXW8F,
-  VEXW90, VEXW91, VEXW92, VEXW93, VEXW94, VEXW95, VEXW96
+  VEXW90, VEXW91, VEXW92, VEXW93, VEXW94, VEXW95, VEXW96, VEXW97
 };
 /** END_DYNINST_TABLE_DEF */
 
 
-#define VEXW_MAX VEXW96
+#define VEXW_MAX VEXW97
 
 /* XOP8 instructions that use xop.w as selector */
 enum{
@@ -1915,6 +1915,8 @@ COMMON_EXPORT dyn_hash_map<entryID, std::string> entryNames_IAPI = map_list_of
   (e_vshufps, "vshufps")
   (e_vshuff32x4, "vshuff32x4")
   (e_vshuff64x2, "vshuff64x2")
+  (e_vshufi32x4, "vshufi32x4")
+  (e_vshufi64x2, "vshufi64x2")
   (e_vsqrtpd, "vsqrtpd")
   (e_vsqrtps, "vsqrtps")
   (e_vsqrtsd, "vsqrtsd")
@@ -3223,7 +3225,7 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_sse_ter, SSET40, true, { Zz, Zz, Zz }, 0, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET41, true, { Zz, Zz, Zz }, 0, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET42, true, { Zz, Zz, Zz }, 0, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0, 0 },
+		{ e_No_Entry, t_vexw, VEXW97, false, { Zz, Zz, Zz }, 0, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET44, true, { Zz, Zz, Zz }, 0, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET46, false, { Zz, Zz, Zz }, 0, 0, 0 },
@@ -5882,7 +5884,7 @@ static ia32_entry sseMapTer[][3] =
         { e_roundpd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R, 0 }
     }, { /* SSET0A */
         { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0, 0 },
-        { e_No_Entry, t_sse_ter_mult, SSET0A_66, false, { Zz, Zz, Zz }, 0, 0, 0 },
+        { e_roundss, t_sse_ter_mult, SSET0A_66, true, { Vss, Wss, Ib }, 0, s1W2R3R, 0 },
         { e_roundss, t_done, 0, true, { Vss, Wss, Ib }, 0, s1W2R3R, 0 },
     }, { /* SSET0B */
         { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0, 0 },
@@ -8446,7 +8448,10 @@ static struct ia32_entry vexWMap[][2] =
     }, { /* VEXW96 */
       { e_vpermps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R, 0 }, /* W = 0 */
       { e_vpermpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R, 0 }  /* W = 1 */
-    }
+    }, { /* VEXW97 */
+      { e_vshufi64x2, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R, 0 }, /* W = 0 */
+      { e_vshufi32x4, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R, 0 }  /* W = 1 */
+     }
 };
 /** END_DYNINST_TABLE_VERIFICATION */
 #undef VEX3_ILL
diff --git a/instructionAPI/src/Operation.C b/instructionAPI/src/Operation.C
index ddb04e3..ef89dd4 100644
--- a/instructionAPI/src/Operation.C
+++ b/instructionAPI/src/Operation.C
@@ -402,7 +402,7 @@ namespace Dyninst
     }
     void Operation_impl::SetUpNonOperandData(bool needFlags)
     {
-        #if defined(arch_x86) || defined(arch_x86_64)
+//        #if defined(arch_x86) || defined(arch_x86_64)
         std::call_once(data_initialized, [&]() {
         if (prefixID == prefix_rep || prefixID == prefix_repnz) 	{
             otherRead.insert(makeRegFromID((archDecodedFrom == Arch_x86) ? x86::df : x86_64::df));
@@ -543,7 +543,7 @@ namespace Dyninst
                 }
             }
         });
-#endif
+//#endif
     return;
     }
   }
